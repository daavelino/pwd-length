

function entropy(alphabet_length, word_length) {
  if (alphabet_length == 0 || word_length == 0) {
    return 0; 
  };
  var entropy = word_length * Math.log(alphabet_length) / Math.log(2);
  return entropy;
};

function countUnique(word) {
  // Returns the number of unique characters in a given word.
  var length = word.length;
  if (length <= 0) {
    return 0;
  };
  var unique_values = [];
  for (var i=0; i<length; i++) {
    if (! unique_values.includes(word[i])) {
      unique_values.push(word[i]);
    } 
  }
  return unique_values.length; 

};

function pwdStrength() {
  /* 
  The result of a comparison between the password entropy and the entropy of 
 the search space generated by it. It is always a number between 0 and 1, 
 the bigger the stronger.
 
  Please check at 

  https://en.wikipedia.org/wiki/Password_strength#Entropy_as_a_measure_of_password_strength 

  for a conceptual overview.
  */

  var alphabet_size = 36; //All ASCII printable characters. 
  
  var password = "";
  var password_size = 0;
  var password_alphabet_size = 0;
  var password_entropy = 0;
  var search_space_entropy = 0;
  var result = 0;
 
  // Get the value at input each time user type a new character.
  password = document.getElementById("password").value;
  password_size = password.length;
  password_alphabet_size = countUnique(password);

  search_space_entropy = entropy(alphabet_size, password_size);
  password_entropy = entropy(password_alphabet_size, password_size); 

  if (search_space_entropy > 0) {
    result = password_entropy / search_space_entropy;
  } else {
    result = 0;
  };
 
  console.log(password_size, password_alphabet_size, password, result);
  return result;
 
};
